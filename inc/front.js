// Generated by CoffeeScript 1.8.0
(function() {
  var $btn_stlist, CENTER_INIT, HPA_MMHG, REFRESH_INTERVAL, TRENDS_INTERVAL, ZOOM_INIT, add_marker, fav_item_click, format_p, format_t, format_w, lib, ll2coords, map, markers, refresh_data, remove_marker, save_favs_delayed, show_map, st_opts_arrow_click, title_t, update_stdata, wind_nesw, _save_favs_timeout;

  lib = window.util;

  window.map = map = null;

  markers = null;

  $btn_stlist = $("#btn_stlist");

  REFRESH_INTERVAL = 4 * 60 * 1000;

  CENTER_INIT = [52.27, 104.26];

  ZOOM_INIT = 13;

  TRENDS_INTERVAL = 60 * 60 * 1000;

  HPA_MMHG = 1.3332239;

  wind_nesw = function(b) {
    if (b >= 360 || b < 0) {
      return "";
    }
    return ["С", "СВ", "В", "ЮВ", "Ю", "ЮЗ", "З", "СЗ"][(Math.floor((b + 22) / 45)) % 8];
  };

  format_t = function(last, trends) {
    var acls, cls, sign, t, tr, tts, _ref;
    if (last.t == null) {
      return "";
    }
    t = Math.round(last.t);
    _ref = t > 0 ? ["pos", "+"] : t < 0 ? ["neg", "-"] : ["zer", ""], cls = _ref[0], sign = _ref[1];
    if (t < 0) {
      t = -t;
    }
    tr = " &nbsp;";
    acls = "";
    if (trends != null ? trends.t : void 0) {
      tts = new Date(trends.ts).getTime();
      if (tts > lib.now() - TRENDS_INTERVAL) {
        if (trends.t.last >= (trends.t.avg + 1)) {
          tr = "&uarr;";
          acls = "pos";
        }
        if (trends.t.last <= (trends.t.avg - 1)) {
          tr = "&darr;";
          acls = "neg";
        }
      }
    }
    return (" <span class='" + cls + "'>" + sign + "<i>" + t + "</i></span>&deg;") + ("<span class='arr " + acls + "'>" + tr + "</span>");
  };

  format_p = function(last) {
    var h, p;
    p = (last.p != null ? Math.round(last.p / HPA_MMHG) + " мм" : void 0) || "";
    h = (last.h != null ? Math.round(last.h) + "%" : void 0) || "";
    if (p && h) {
      return p + ", " + h;
    } else {
      return p + h;
    }
  };

  format_w = function(last) {
    var d, s;
    if ((last.w != null) || (last.g != null)) {
      s = last.w != null ? "" + Math.round(last.w) : "";
      if ((last.g != null) && (Math.round(last.g) > Math.round(last.w))) {
        if (s) {
          s += "-";
        }
        s += Math.round(last.g);
      }
      if (s) {
        s += " м/с";
      }
      if ((last.b != null) && (Math.round(last.w) > 0)) {
        d = wind_nesw(Math.round(last.b));
        if (d) {
          s += ", " + d;
        }
      }
      return s;
    } else {
      return "";
    }
  };

  update_stdata = function(v) {
    var d, k, _i, _len, _results;
    if (!v._id) {
      return;
    }
    d = window.st_data[v._id];
    if (!d) {
      return (window.st_data[v._id] = v);
    }
    _results = [];
    for (_i = 0, _len = v.length; _i < _len; _i++) {
      k = v[_i];
      _results.push(d[k] = v[k]);
    }
    return _results;
  };

  refresh_data = function(delay) {
    if (window.refresh_tout) {
      clearTimeout(window.refresh_tout);
    }
    return window.refresh_tout = setTimeout(function() {
      var st_list;
      $("#btn_refresh").prop("disabled", 1);
      st_list = window.fav_ids;
      return $.getJSON("/st_data", {
        st_list: st_list.join(','),
        ts: lib.now()
      }, function(resp) {
        var d, k, s, v, _i, _len, _ref;
        if (!resp.ok) {
          alert("Ошибка при обращении к серверу.");
          return;
        }
        _ref = resp.data;
        for (k in _ref) {
          v = _ref[k];
          update_stdata(v);
        }
        for (_i = 0, _len = st_list.length; _i < _len; _i++) {
          s = st_list[_i];
          d = resp.data[s];
          if (d) {
            $("#favst_" + d._id + " .data").html(format_t(d.last, d.trends)).append($("<div class='w'></<div>").html(format_w(d.last))).append($("<div class='p'></<div>").html(format_p(d.last)));
          } else {
            $("#favst_" + s + " .data").html("");
          }
        }
        $("#btn_refresh").children(".hhmm").text(resp.hhmm || "??:??");
        $("#btn_refresh").removeProp("disabled");
        return refresh_data(REFRESH_INTERVAL);
      });
    }, delay);
  };

  _save_favs_timeout = null;

  save_favs_delayed = function(delay) {
    if (delay == null) {
      delay = 1000;
    }
    if (_save_favs_timeout) {
      clearTimeout(_save_favs_timeout);
    }
    return _save_favs_timeout = setTimeout(function() {
      var favs;
      favs = [];
      $(".item", "#st_list_opts").each(function(i, v) {
        var $v;
        $v = $(v);
        if ($v.find(".check").prop("checked")) {
          favs.push($v.data("st"));
        }
        return true;
      });
      return window.util.post("/st_favs", {
        favs: favs
      }, function(data) {});
    }, delay);
  };

  ll2coords = function(ll) {
    if ((ll != null ? ll.length : void 0) === 2) {
      return [ll[1], ll[0]];
    }
  };

  fav_item_click = function(evt) {
    var g, st, zoom, _ref;
    st = (_ref = window.st_data) != null ? _ref[$(this).data("st")] : void 0;
    if (!st) {
      return;
    }
    if (st.ll && window.map) {
      zoom = map.getZoom();
      map.setCenter(ll2coords(st.ll), zoom < ZOOM_INIT ? ZOOM_INIT + 1 : zoom);
      remove_marker(st._id);
      add_marker(st);
    }
    if ($().sparkline) {
      $(".graph", "#favst_" + st._id).html((g = $("<div class='bar'></div>")));
      return $.getJSON("/st_graph", {
        st: st._id,
        n: 2
      }).done(function(resp) {
        var t;
        if (!resp.ok) {
          return alert("Ошибка при обращении к серверу!");
        }
        return g.sparkline((function() {
          var _i, _len, _ref1, _results;
          _ref1 = resp.data;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            t = _ref1[_i];
            _results.push(Math.round(t.t_a));
          }
          return _results;
        })(), {
          type: "bar",
          barColor: "red",
          negBarColor: "blue",
          barWidth: 3,
          disableInteraction: true
        });
      });
    }
  };

  st_opts_arrow_click = function(evt) {
    var $et, $item, $next, $prev;
    $et = $(evt.target);
    $item = $et.closest(".item");
    if ($et.hasClass('move-up')) {
      $prev = $item.prev(".item");
      if ($prev.length) {
        $item.detach().insertBefore($prev);
        save_favs_delayed();
      }
      return false;
    }
    if ($et.hasClass('move-down')) {
      $next = $item.next(".item");
      if ($next.length) {
        $item.detach().insertAfter($next);
        save_favs_delayed();
      }
      return false;
    }
    return false;
  };

  title_t = function(d) {
    var cls, t, _ref;
    t = (_ref = d.last) != null ? _ref.t : void 0;
    if (t == null) {
      return d.title;
    }
    t = Math.round(t);
    if (t > 0) {
      t = "+" + t;
      cls = "pos";
    } else if (t < 0) {
      cls = "neg";
    } else {
      cls = "zer";
    }
    return d.title + (" <b class='" + cls + "'>") + t + "</b>&deg;";
  };

  add_marker = function(d) {
    var c;
    if (!d) {
      return;
    }
    if (!(c = ll2coords(d.ll)) || !markers) {
      return;
    }
    return markers.add(new ymaps.Placemark(c, {
      iconContent: title_t(d)
    }, {
      preset: 'twirl#greyStretchyIcon'
    }, {
      st: d._id
    }));
  };

  remove_marker = function(st) {
    if (!markers || !st) {
      return;
    }
    return markers.each(function(m) {
      if (m.properties.get("st") === st) {
        markers.remove(m);
        return false;
      }
    });
  };

  show_map = function() {
    var k, st0, _i, _len, _ref, _ref1, _results;
    if (!window.map) {
      window.ymaps_onload = function() {
        $("#pane_map").html("<div class='map' id='map'></div>");
        window.map = map = new ymaps.Map("map", {
          center: CENTER_INIT,
          zoom: ZOOM_INIT
        });
        map.controls.add(new ymaps.control.ZoomControl({
          noTips: true
        }), {
          top: 7,
          left: 7
        });
        map.controls.add('typeSelector');
        map.geoObjects.add(markers = new ymaps.GeoObjectCollection());
        return show_map();
      };
      $.getScript("//api-maps.yandex.ru/2.0-stable/?lang=ru-RU&load=package.standard&onload=ymaps_onload");
      return;
    }
    markers.removeAll();
    st0 = $($("#fav_items .item").get(0)).data("st");
    map.setCenter(ll2coords((_ref = window.st_data[st0]) != null ? _ref.ll : void 0) || CENTER_INIT);
    _ref1 = window.fav_ids;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      k = _ref1[_i];
      _results.push(add_marker(window.st_data[k]));
    }
    return _results;
  };

  $("#btn_refresh").click(function() {
    return refresh_data(0);
  });

  $(function() {
    $("#fav_items").on("click", ".item", fav_item_click);
    $("#st_list_opts").on("click", ".item .check", save_favs_delayed);
    $("#st_list_opts").on("click", ".item .arrow", st_opts_arrow_click);
    refresh_data(REFRESH_INTERVAL);
    $.getScript("/inc/js/jquery.sparkline.min.js").done(function() {});
    return show_map();
  });

}).call(this);
